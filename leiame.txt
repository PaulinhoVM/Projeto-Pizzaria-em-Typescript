# ğŸ“„ Tutorial Estrutura do Projeto Pizzaria

Este documento explica detalhadamente a funÃ§Ã£o de cada pasta e arquivo dentro do projeto **PROJETO-PIZZARIA-MAIN**.

------------------------------------------------------------
ğŸ“‚ data
------------------------------------------------------------
ContÃ©m arquivos de dados e relatÃ³rios usados pelo sistema.

  ğŸ“‚ notas-fiscais/
    - Armazena as notas fiscais geradas para cada pedido.
   

  ğŸ“‚ Relatorio setembro/
    - ContÃ©m relatÃ³rios mensais de vendas e informaÃ§Ãµes.
    -

  - pedidos.json â†’ Lista de pedidos realizados (em formato JSON).
  - produtos.json â†’ Cadastro de produtos (pizzas, bebidas, etc.).
  - usuarios.json â†’ Dados dos usuÃ¡rios/clientes cadastrados.

------------------------------------------------------------
ğŸ“‚ dist
------------------------------------------------------------
- Usado para armazenar os arquivos compilados/transpilados do TypeScript para JavaScript.

------------------------------------------------------------
ğŸ“‚ node_modules
------------------------------------------------------------
- Pasta automÃ¡tica gerada pelo **npm**, contendo todas as dependÃªncias instaladas do projeto.

------------------------------------------------------------
ğŸ“‚ src
------------------------------------------------------------
Pasta principal com o cÃ³digo-fonte do sistema.

  ğŸ“‚ controllers
    - ResponsÃ¡veis por controlar as requisiÃ§Ãµes e respostas da aplicaÃ§Ã£o.
    - AdminControllers.ts â†’ Controla funÃ§Ãµes administrativas (gerenciar usuÃ¡rios, produtos, relatÃ³rios).
    - ClienteControllers.ts â†’ Controla funcionalidades relacionadas ao cliente (pedidos, cadastro).
    - MenuControllers.ts â†’ Gerencia o cardÃ¡pio (produtos, categorias).

  ğŸ“‚ models
    - Define as estruturas e modelos de dados usados no sistema.
    - index.ts â†’ Arquivo central para exportar/importar os modelos.

  ğŸ“‚ services
    - ContÃ©m regras de negÃ³cio e manipulaÃ§Ã£o de dados.
    - DataServices.ts â†’ ServiÃ§os gerais para manipulaÃ§Ã£o de dados.
    - Pedido.ts â†’ Regras de negÃ³cio relacionadas a pedidos.
    - Produto.ts â†’ Regras relacionadas a produtos (cadastrar, editar, excluir).
    - Usuario.ts â†’ Regras relacionadas aos usuÃ¡rios (login, cadastro, validaÃ§Ã£o).

  ğŸ“‚ utils
    - FunÃ§Ãµes utilitÃ¡rias e auxiliares.
    - FileUtils.ts â†’ FunÃ§Ãµes para manipulaÃ§Ã£o de arquivos (ler, salvar).
    - promptUtils.ts â†’ Utilidades para lidar com entrada de dados do usuÃ¡rio.
    - validators.ts â†’ Regras de validaÃ§Ã£o (ex: validar email, senha, campos obrigatÃ³rios).

  - main.ts â†’ Arquivo principal da aplicaÃ§Ã£o. Normalmente Ã© o ponto de entrada do sistema.

------------------------------------------------------------
ğŸ“‚ raiz do projeto
------------------------------------------------------------
- package.json â†’ Lista dependÃªncias e scripts do projeto.
- package-lock.json â†’ VersÃµes exatas das dependÃªncias instaladas.
- PizzariaEdu.exe â†’ ExecutÃ¡vel do sistema (provavelmente versÃ£o compilada para Windows).
- PizzariaEduEmBat.bat â†’ Script em batch para rodar a aplicaÃ§Ã£o no Windows.
- readme.txt â†’ Arquivo de instruÃ§Ãµes e descriÃ§Ã£o do projeto.
- tsconfig.json â†’ ConfiguraÃ§Ã£o do compilador TypeScript.

------------------------------------------------------------
âœ… ConclusÃ£o
------------------------------------------------------------
Esse tutorial serve como documentaÃ§Ã£o bÃ¡sica da estrutura do projeto, explicando
o propÃ³sito de cada pasta e arquivo. Com ele, novos desenvolvedores ou usuÃ¡rios
conseguem entender rapidamente como o sistema estÃ¡ organizado e onde encontrar
as funcionalidades especÃ­ficas.
